var shootTimer:FlxTimer;
var bulletSpeed:Float = 600;
var bulletCount:Int = 8;
var currentAngleIndex:Int = 0;
var rotationSpeed:Int = 1; // Positions to rotate each shot

// Pre-calculated directions for 8-way shot with rotation
var anglePresets = [
    // Each inner array contains 8 directions [x,y]
    // Rotated versions to create animation
    [{x:1.0, y:0.0}, {x:0.7, y:0.7}, {x:0.0, y:1.0}, {x:-0.7, y:0.7}, 
     {x:-1.0, y:0.0}, {x:-0.7, y:-0.7}, {x:0.0, y:-1.0}, {x:0.7, y:-0.7}],
     
    [{x:0.9, y:0.4}, {x:0.4, y:0.9}, {x:-0.4, y:0.9}, {x:-0.9, y:0.4},
     {x:-0.9, y:-0.4}, {x:-0.4, y:-0.9}, {x:0.4, y:-0.9}, {x:0.9, y:-0.4}],
     
    [{x:0.7, y:0.7}, {x:0.0, y:1.0}, {x:-0.7, y:0.7}, {x:-1.0, y:0.0},
     {x:-0.7, y:-0.7}, {x:0.0, y:-1.0}, {x:0.7, y:-0.7}, {x:1.0, y:0.0}]
];

function init() {
    import("objects.Bullet");
    
    enemy.loadGraphic(Paths.images("enemy_shooter"), false);
    enemy.health = enemy.enemyScore = 25;
    
    // Start shooting timer (faster for better animation)
    shootTimer = new FlxTimer().start(0.5, function(_) {
        if (enemy.alive) shootAtPlayer();
    }, 0);
}

function shootAtPlayer() {
    var centerX = enemy.x + enemy.width/2 - 4;
    var centerY = enemy.y + enemy.height/2 - 4;
    
    // Get current rotation frame
    var directions = anglePresets[currentAngleIndex];
    
    // Create bullets
    for (dir in directions) {
        var bullet = new Bullet(centerX, centerY);
        bullet.power = 5;
        bullet.velocity.set(dir.x * bulletSpeed, dir.y * bulletSpeed);
        
        // Optional: Set approximate angle based on direction
        if (dir.x > 0.9) bullet.angle = 0;
        else if (dir.x > 0.6 && dir.y > 0.6) bullet.angle = 45;
        else if (dir.y > 0.9) bullet.angle = 90;
        // ... set other angles similarly
        
        add(bullet);
        game.enemiesBullet.push(bullet);
    }
    
    // Advance to next rotation frame
    currentAngleIndex = (currentAngleIndex + rotationSpeed) % anglePresets.length;
}

function cleanUp() {
    if (shootTimer != null) shootTimer.cancel();
}

function destroy() {
    cleanUp();
}